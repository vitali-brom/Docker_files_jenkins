pipeline {
  environment {
    AWS_ACCOUNT_ID = "446490198376"
    AWS_DEFAULT_REGION = "eu-central-1"
    IMAGE_REPO_NAME ="container-app-demo"
    IMAGE_TAG="latest"
    REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    SERVICE_NAME = 'container-app-demo'
    TASK_FAMILY="container-app-demo" // at least one container needs to have the same name as the task definition
    DESIRED_COUNT="1"
    CLUSTER_NAME = "JenkinsFarget"
    SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
    AWS_ID = credentials("aws_bob")
    AWS_ACCESS_KEY_ID = "${env.AWS_ID_USR}"
    AWS_SECRET_ACCESS_KEY = "${env.AWS_ID_PSW}"
    EXECUTION_ROLE_ARN = "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole"
  }

    agent any

    stages {
        stage('Build image') {
            steps {
                script {
                    // Build image in the top directory
                    dir ('/home/ubuntu/jenkins/workspace/Pipeline/Df-apache+php/') {
                        def dockerImage = docker.build("$REPOSITORY_URI", ".")
                        //sh 'docker build -t 446490198376.dkr.ecr.eu-central-1.amazonaws.com/container-app-demo .'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Publish Image to ECR') {
            steps{
                script {
                    //sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                    //docker.withRegistry("https://" + "$REPOSITORY_URI", "ecr:$"$AWS_ID") {
                    //    dockerImage.push("${env.BUILD_NUMBER}")
                    //    dockerImage.push("latest")
                        // Push to ECR
                        //docker.image("$REPOSITORY_URI").push("$SHORT_COMMIT")
                    //}
                }
            }
        }
        stage('Deploy Image to ECS') {
            steps{
                // prepare task definition file
                sh """sed -e "s;%REPOSITORY_URI%;${REPOSITORY_URI};g" -e "s;%SHORT_COMMIT%;${SHORT_COMMIT};g" -e "s;%TASK_FAMILY%;${TASK_FAMILY};g" -e "s;%SERVICE_NAME%;${SERVICE_NAME};g" -e "s;%EXECUTION_ROLE_ARN%;${EXECUTION_ROLE_ARN};g" taskdef_template.json > taskdef_${SHORT_COMMIT}.json"""
                script {
                    // Register task definition
                    AWS("ecs register-task-definition --output json --cli-input-json file://${WORKSPACE}/taskdef_${SHORT_COMMIT}.json > ${env.WORKSPACE}/temp.json")
                    def projects = readJSON file: "${env.WORKSPACE}/temp.json"
                    def TASK_REVISION = projects.taskDefinition.revision

                    // update service
                    AWS("ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${TASK_REVISION} --desired-count ${DESIRED_COUNT}")
                }
            }
        }
        stage('Remove docker image') {
            steps{
                // Remove images
                sh "docker rmi $REPOSITORY_URI"
            }
        }
    }
}